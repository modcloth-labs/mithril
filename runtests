#!/usr/bin/env ruby
# vim:fileencoding=utf-8

require 'fileutils'
require 'minitest/spec'
require 'net/http'

require File.expand_path('../.golden/bits', __FILE__)
require File.expand_path('../.golden/server_runner', __FILE__)

PG_ENABLED = ENV['MITHRIL_PG_ENABLED'] != 'false'
SUITE_LOAD_START = Time.now.utc.strftime('%Y%m%d%H%M%S')
if PG_ENABLED
  PSQL_USER = ENV['MITHRIL_PG_USER'] || ENV['USER']
  PG_URI = ENV['MITHRIL_PG_URI'] || 'postgres://localhost/mithril_test?sslmode=disable'
  PG_DB_NAME = ENV['MITHRIL_PG_DB_NAME'] || 'mithril_test'
end

$servers = {
  amqp_only: ServerRunner.new(
    port: rand(9400..9449),
    start: Time.now.utc,
  ),
}
if PG_ENABLED
  $servers[:with_pg] = ServerRunner.new(
    port: rand(9450..9499),
    start: Time.now.utc,
    extra_args: "-s postgresql -u='#{PG_URI}'"
  )
end

$servers.each do |server_type,server|
  server_name = server_type.to_s.gsub(/_/, ' ')
  describe "#{server_name} mithril server" do
    it 'listens on the specified port' do
      Net::HTTP.get('localhost', '/foop/fwap', server.port).wont_be_empty
    end

    it 'rejects non-pprof GET requests' do
      res = Net::HTTP.get_response('localhost', '/jazz/pant', server.port)
      res.code.must_equal '405'
    end

    it 'serves a favicon' do
      res = Net::HTTP.get_response('localhost', '/favicon.ico', server.port)
      res['Content-Type'].must_equal 'image/vnd.microsoft.icon'
    end
  end
end

describe "the -v arg" do
  let(:server) do
    ServerRunner.new(
      port: rand(9450..9499),
      start: Time.now.utc,
      global_args: "-v"
    )
  end

  before do
    server.start
  end

  it "produces a valid result" do
    File.read(server.logfile).wont_match(/<unknown>/)
  end

  after do
    server.stop
  end
end

if PG_ENABLED
  describe 'with pg mithril server' do
    # Having tests for the database may seem odd in a golden master/black box
    # style test.  The reasoning here is that by ensuring the database interface,
    # we allow for innovation in "replay clients" (plus mithril doesn't yet have
    # its own).  Essentially, we are querying the database in the way that we
    # would otherwise inspect STDOUT.
    it 'ensures the `mithril_requests` table is available' do
      out = run_psql(
        'SELECT COUNT(*) FROM mithril_requests',
        user: PSQL_USER, db: PG_DB_NAME
      ).first
      out.strip.wont_be_empty
    end

    it 'tracks migrations with a schema migrations table' do
      out = run_psql(
        'SELECT * FROM schema_migrations',
        user: PSQL_USER, db: PG_DB_NAME
      ).first
      out.split($/).first.strip.wont_be_empty
    end

    describe 'after requests have been POSTed' do
      before do
        run_psql(
          %W{DELETE FROM mithril_requests
           WHERE exchange = 'pg_exchange_#{SUITE_LOAD_START}'}.join(' '),
           user: PSQL_USER, db: PG_DB_NAME
        )
        post_requests(
          port: $servers[:with_pg].port,
          type: :json,
          count: 5,
          exchange: "pg_exchange_#{SUITE_LOAD_START}",
          routing_key: 'pg.new',
        )
      end

      it 'ensures requests can be selected by `exchange`' do
        out = run_psql(
          %W{SELECT COUNT(*)
           FROM mithril_requests
           WHERE exchange = 'pg_exchange_#{SUITE_LOAD_START}'}.join(' '),
           user: PSQL_USER, db: PG_DB_NAME
        ).first
        count = Integer(out.strip)
        count.must_equal 5
      end
    end
  end
end

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def main(argv = [].freeze)
  at_exit do
    $servers.each do |_,runner|
      runner.stop
    end
    system("rabbitmqadmin delete exchange name=pg_exchange_#{SUITE_LOAD_START}")
  end

  if PG_ENABLED
    %w(mithril_requests schema_migrations).each do |table_name|
      run_psql(
        "DROP TABLE IF EXISTS #{table_name}",
        user: PSQL_USER, db: PG_DB_NAME
      )
    end
  end

  unless system("rabbitmqadmin declare exchange name=pg_exchange_#{SUITE_LOAD_START} type=topic")
    raise "Couldn't declare exchange pg_exchange_#{SUITE_LOAD_START}"
  end

  Dir.chdir(File.expand_path('../', __FILE__)) do
    FileUtils.mkdir_p('./.artifacts')
    $servers.each do |_,runner|
      runner.start
    end
  end

  MiniTest::Unit.output = MiniTestReporter.new
  exit_code = MiniTest::Unit.new.run(argv)

  if exit_code == 0
    $stderr.puts BRIGHT_GREEN
    $stderr.puts <<-EOF.gsub(/^ {4}/, '')
      ✓✓      ✓✓ ✓✓✓✓ ✓✓    ✓✓
      ✓✓  ✓✓  ✓✓  ✓✓  ✓✓✓   ✓✓
      ✓✓  ✓✓  ✓✓  ✓✓  ✓✓✓✓  ✓✓
      ✓✓  ✓✓  ✓✓  ✓✓  ✓✓ ✓✓ ✓✓
      ✓✓  ✓✓  ✓✓  ✓✓  ✓✓  ✓✓✓✓
      ✓✓  ✓✓  ✓✓  ✓✓  ✓✓   ✓✓✓
       ✓✓✓  ✓✓✓  ✓✓✓✓ ✓✓    ✓✓
    EOF
    $stderr.puts RESET
  else
    $stderr.puts BRIGHT_RED
    $stderr.puts <<-EOF.gsub(/^ {4}/, '')
      ✘✘✘✘✘✘✘✘    ✘✘✘    ✘✘✘✘ ✘✘
      ✘✘         ✘✘ ✘✘    ✘✘  ✘✘
      ✘✘        ✘✘   ✘✘   ✘✘  ✘✘
      ✘✘✘✘✘✘   ✘✘     ✘✘  ✘✘  ✘✘
      ✘✘       ✘✘✘✘✘✘✘✘✘  ✘✘  ✘✘
      ✘✘       ✘✘     ✘✘  ✘✘  ✘✘
      ✘✘       ✘✘     ✘✘ ✘✘✘✘ ✘✘✘✘✘✘✘✘
    EOF
    $stderr.puts RESET

    $servers.each { |_,server| server.dump_log }
  end

  exit exit_code
end

if __FILE__ == $0
  exit main(ARGV)
end

# vim:filetype=ruby
